// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
/*
 * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
 * Author: Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.
 */
/dts-v1/;

#include "stm32mp157.dtsi"
#include "stm32mp15xc.dtsi"
#include "stm32mp15-pinctrl.dtsi"
#include "stm32mp15xxaa-pinctrl.dtsi"
#include "stm32mp157-m4-srm.dtsi"
#include "stm32mp157-m4-srm-pinctrl.dtsi"
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/mfd/st,stpmic1.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/soc/stm32-hdp.h>

/ {
	model = "Emcraft STM32MP1 SOM Rev 1A";
	compatible = "st,stm32mp1-som", "st,stm32mp157c-ev1", "st,stm32mp157c-ed1", "st,stm32mp157";

	chosen {
		stdout-path = "serial0:115200n8";
	};

	aliases {
		serial1 = &usart3;
		ethernet0 = &ethernet0;
	};

	aliases {
		serial0 = &uart4;
	};

	reserved-memory {
		gpu_reserved: gpu@f6000000 {
			reg = <0xf6000000 0x8000000>;
			no-map;
		};
	};

	memory@c0000000 {
		device_type = "memory";
		reg = <0xC0000000 0x40000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		mcuram2: mcuram2@10000000 {
			compatible = "shared-dma-pool";
			reg = <0x10000000 0x40000>;
			no-map;
		};

		vdev0vring0: vdev0vring0@10040000 {
			compatible = "shared-dma-pool";
			reg = <0x10040000 0x1000>;
			no-map;
		};

		vdev0vring1: vdev0vring1@10041000 {
			compatible = "shared-dma-pool";
			reg = <0x10041000 0x1000>;
			no-map;
		};

		vdev0buffer: vdev0buffer@10042000 {
			compatible = "shared-dma-pool";
			reg = <0x10042000 0x4000>;
			no-map;
		};

		mcuram: mcuram@30000000 {
			compatible = "shared-dma-pool";
			reg = <0x30000000 0x40000>;
			no-map;
		};

		retram: retram@38000000 {
			compatible = "shared-dma-pool";
			reg = <0x38000000 0x10000>;
			no-map;
		};
	};

	led {
		compatible = "gpio-leds";
		blue {
			label = "heartbeat";
			gpios = <&gpiod 9 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat";
			default-state = "off";
		};
	};

	sd_switch: regulator-sd_switch {
		compatible = "regulator-gpio";
		regulator-name = "sd_switch";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <2900000>;
		regulator-type = "voltage";
		regulator-always-on;

		gpios = <&gpiof 14 GPIO_ACTIVE_HIGH>;
		gpios-states = <0>;
		states = <1800000 0x1 2900000 0x0>;
	};

	vin: vin {
		compatible = "regulator-fixed";
		regulator-name = "vin";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	clocks {
		clk_ext_camera: clk-ext-camera {
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <24000000>;
		};
	};

	panel_backlight: panel-backlight {
		compatible = "gpio-backlight";
		gpios = <&gpiod 13 GPIO_ACTIVE_LOW>;
		default-on;
		status = "okay";
	};


	dmic0: dmic-0 {
		compatible = "dmic-codec";
		#sound-dai-cells = <1>;
		sound-name-prefix = "dmic0";
		status = "okay";

		port {
			dmic0_endpoint: endpoint {
				remote-endpoint = <&dfsdm_endpoint0>;
			};
		};
	};

	dmic1: dmic-1 {
		compatible = "dmic-codec";
		#sound-dai-cells = <1>;
		sound-name-prefix = "dmic1";
		status = "okay";

		port {
			dmic1_endpoint: endpoint {
				remote-endpoint = <&dfsdm_endpoint1>;
			};
		};
	};

	dmic2: dmic-2 {
		compatible = "dmic-codec";
		#sound-dai-cells = <1>;
		sound-name-prefix = "dmic2";
		status = "okay";

		port {
			dmic2_endpoint: endpoint {
				remote-endpoint = <&dfsdm_endpoint2>;
			};
		};
	};

	dmic3: dmic-3 {
		compatible = "dmic-codec";
		#sound-dai-cells = <1>;
		sound-name-prefix = "dmic3";
		status = "okay";

		port {
			dmic3_endpoint: endpoint {
				remote-endpoint = <&dfsdm_endpoint3>;
			};
		};
	};

	usb_phy_tuning: usb-phy-tuning {
		st,hs-dc-level = <2>;
		st,fs-rftime-tuning;
		st,hs-rftime-reduction;
		st,hs-current-trim = <15>;
		st,hs-impedance-trim = <1>;
		st,squelch-level = <3>;
		st,hs-rx-offset = <2>;
		st,no-lsfs-sc;
	};

	regulators {
		compatible = "simple-bus";
		#address-cells = <1>;
		#size-cells = <0>;
		pinctrl-0 = <&periph_on_pin>;
		pinctrl-names = "default";

		periph_on: periph_on-regulator {
			compatible = "regulator-fixed";
			reg = <1>;
			regulator-name = "periph_on";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			startup-delay-us = <2000000>;
			enable-active-high;
			regulator-always-on;
			regulator-boot-on;
			gpio = <&gpiof 3 GPIO_ACTIVE_HIGH>;
		};

		usb_host_vbus: usb-host-regulator {
			compatible = "regulator-fixed";
			reg = <1>;
			regulator-name = "usb_host_vbus";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			gpio = <&gpiod 14 GPIO_ACTIVE_HIGH>;
			enable-active-high;
                };

		usb_otg1_vbus: usb-otg1-regulator {
			compatible = "regulator-fixed";
			reg = <1>;
			regulator-name = "usb_otg1_vbus";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			gpio = <&gpioa 15 GPIO_ACTIVE_HIGH>;
			enable-active-high;
		};
	};
};

&adc {
	/* ANA0, ANA1 are dedicated pins and don't need pinctrl: only in6. */
	pinctrl-0 = <&adc1_in6_pins_a>;
	pinctrl-names = "default";
	status = "disabled";
	adc1: adc@0 {
		st,adc-channels = <0 1 6>;
		/* 16.5 ck_cycles sampling time */
		st,min-sample-time-nsecs = <400>;
		status = "okay";
	};
};

&crc1 {
	status = "okay";
};

&dac {
	pinctrl-names = "default";
	pinctrl-0 = <&dac_ch1_pins_a &dac_ch2_pins_a>;
	status = "disabled";
	dac1: dac@1 {
		status = "okay";
	};
	dac2: dac@2 {
		status = "okay";
	};
};

&dma1 {
	sram = <&dma_pool>;
};

&dma2 {
	sram = <&dma_pool>;
};

&dts {
	status = "okay";
};

&hash1 {
	status = "okay";
};

&ipcc {
	status = "okay";
};

&iwdg2 {
	timeout-sec = <32>;
	status = "okay";
};

&m4_rproc {
	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
			<&vdev0vring1>, <&vdev0buffer>;
	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
	mbox-names = "vq0", "vq1", "shutdown";
	interrupt-parent = <&exti>;
	interrupts = <68 1>;
	wakeup-source;
	status = "okay";
};

&pwr_regulators {
	vdd-supply = <&periph_on>;
	vdd_3v3_usbfs-supply = <&periph_on>;
};

&rng1 {
	status = "okay";
};

&rtc {
	status = "okay";
};


&sdmmc1_b4_pins_a {
		  pins1 {
			slew-rate = <0>;
			bias-pull-up;
			/delete-property/bias-disable;
		  };
		  pins2 {
			slew-rate = <0>;
			bias-pull-up;
			/delete-property/bias-disable;
		  };
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_b4_pins_a &sdmmc1_dir_pins_a>;
	pinctrl-1 = <&sdmmc1_b4_od_pins_a &sdmmc1_dir_pins_a>;
	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a &sdmmc1_dir_sleep_pins_a>;

	broken-cd;
	disable-wp;
	st,sig-dir;
	st,neg-edge;
	bus-width = <4>;
	sd-uhs-sdr12;
	sd-uhs-sdr25;
	sd-uhs-sdr50;
	sd-uhs-ddr50;
	sd-uhs-sdr104;
	status = "okay";
};

&sdmmc2 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_b4_pins_a &sdmmc2_d47_pins_a>;
	pinctrl-1 = <&sdmmc2_b4_od_pins_a &sdmmc2_d47_pins_a>;
	pinctrl-2 = <&sdmmc2_b4_sleep_pins_a &sdmmc2_d47_sleep_pins_a>;
	non-removable;
	no-sd;
	no-sdio;
	st,neg-edge;
	bus-width = <8>;
	mmc-ddr-3_3v;
	status = "okay";
};

&sram {
	dma_pool: dma_pool@0 {
		reg = <0x50000 0x10000>;
		pool;
	};
};

&timers6 {
	status = "okay";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;
	timer@5 {
		status = "okay";
	};
};

&uart4 {
	pinctrl-names = "default", "sleep", "idle";
	pinctrl-0 = <&uart4_pins_a>;
	pinctrl-1 = <&uart4_sleep_pins_a>;
	pinctrl-2 = <&uart4_idle_pins_a>;
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	status = "okay";
};


&usbotg_hs {
	pinctrl-0 = <&usbotg_hs_pins_a>;
	pinctrl-names = "default";
	phys = <&usbphyc_port1 0>;
	usb-role-switch;
	vbus-supply = <&usb_otg1_vbus>;
	phy-names = "usb2-phy";
	status = "okay";
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	st,phy-tuning = <&usb_phy_tuning>;
};

&usbphyc_port1 {
	st,phy-tuning = <&usb_phy_tuning>;
};

&cryp1 {
	status="okay";
};

&gpu {
	contiguous-area = <&gpu_reserved>;
	status = "okay";
};


&cec {
	pinctrl-names = "default";
	pinctrl-0 = <&cec_pins_a>;
	status = "okay";
};

&dfsdm {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&dfsdm_clkout_pins_a
		     &dfsdm_data1_pins_a &dfsdm_data3_pins_a>;
	pinctrl-1 = <&dfsdm_clkout_sleep_pins_a
		     &dfsdm_data1_sleep_pins_a &dfsdm_data3_sleep_pins_a>;
	spi-max-frequency = <2048000>;

	clocks = <&rcc DFSDM_K>, <&rcc ADFSDM_K>;
	clock-names = "dfsdm", "audio";
	status = "okay";

	dfsdm0: filter@0 {
		compatible = "st,stm32-dfsdm-dmic";
		st,adc-channels = <3>;
		st,adc-channel-names = "dmic_u1";
		st,adc-channel-types = "SPI_R";
		st,adc-channel-clk-src = "CLKOUT";
		st,filter-order = <3>;
		status = "okay";

		asoc_pdm0: dfsdm-dai {
			compatible = "st,stm32h7-dfsdm-dai";
			#sound-dai-cells = <0>;
			io-channels = <&dfsdm0 0>;
			status = "okay";

			dfsdm0_port: port {
				dfsdm_endpoint0: endpoint {
					remote-endpoint = <&dmic0_endpoint>;
				};
			};
		};
	};

	dfsdm1: filter@1 {
		compatible = "st,stm32-dfsdm-dmic";
		st,adc-channels = <0>;
		st,adc-channel-names = "dmic_u2";
		st,adc-channel-types = "SPI_F";
		st,adc-channel-clk-src = "CLKOUT";
		st,filter-order = <3>;
		st,adc-alt-channel = <1>;
		status = "okay";

		asoc_pdm1: dfsdm-dai {
			compatible = "st,stm32h7-dfsdm-dai";
			#sound-dai-cells = <0>;
			io-channels = <&dfsdm1 0>;
			status = "okay";

			dfsdm1_port: port {
				dfsdm_endpoint1: endpoint {
					remote-endpoint = <&dmic1_endpoint>;
				};
			};
		};
	};

	dfsdm2: filter@2 {
		compatible = "st,stm32-dfsdm-dmic";
		st,adc-channels = <2>;
		st,adc-channel-names = "dmic_u3";
		st,adc-channel-types = "SPI_F";
		st,adc-channel-clk-src = "CLKOUT";
		st,adc-alt-channel = <1>;
		st,filter-order = <3>;
		status = "okay";

		asoc_pdm2: dfsdm-dai {
			compatible = "st,stm32h7-dfsdm-dai";
			#sound-dai-cells = <0>;
			io-channels = <&dfsdm2 0>;
			status = "okay";

			dfsdm2_port: port {
				dfsdm_endpoint2: endpoint {
					remote-endpoint = <&dmic2_endpoint>;
				};
			};
		};
	};

	dfsdm3: filter@3 {
		compatible = "st,stm32-dfsdm-dmic";
		st,adc-channels = <1>;
		st,adc-channel-names = "dmic_u4";
		st,adc-channel-types = "SPI_R";
		st,adc-channel-clk-src = "CLKOUT";
		st,filter-order = <3>;
		status = "okay";

		asoc_pdm3: dfsdm-dai {
			compatible = "st,stm32h7-dfsdm-dai";
			#sound-dai-cells = <0>;
			io-channels = <&dfsdm3 0>;
			status = "okay";

			dfsdm3_port: port {
				dfsdm_endpoint3: endpoint {
					remote-endpoint = <&dmic3_endpoint>;
				};
			};
		};
	};
};

&ethernet0 {
	status = "okay";
	pinctrl-0 = <&ethernet0_rgmii_pins_a>;
	pinctrl-1 = <&ethernet0_rgmii_pins_sleep_a>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rgmii-id";
	max-speed = <1000>;
	phy-handle = <&phy0>;
	nvmem-cells = <&ethernet_mac_address>;
	nvmem-cell-names = "mac-address";
	phy-reset-gpios = <&gpiod 11 GPIO_ACTIVE_HIGH>;
	st,int-phyclk;

	mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
		phy0: ethernet-phy@0 {
			reg = <0>;
		};
	};
};

&fmc {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fmc_pins_a>;
	pinctrl-1 = <&fmc_sleep_pins_a>;
	status = "okay";

	nand-controller@4,0 {
		status = "okay";

		nand@0 {
			reg = <0>;
			nand-on-flash-bbt;
			#address-cells = <1>;
			#size-cells = <1>;
		};
	};
};

&hdp {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&hdp0_pins_a &hdp6_pins_a &hdp7_pins_a>;
	pinctrl-1 = <&hdp0_pins_sleep_a &hdp6_pins_sleep_a &hdp7_pins_sleep_a>;
	status = "disabled";

	muxing-hdp = <(STM32_HDP(0, HDP0_GPOVAL_0) |
		       STM32_HDP(6, HDP6_GPOVAL_6) |
		       STM32_HDP(7, HDP7_GPOVAL_7))>;
};

&i2c2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c2_pins_a>;
	pinctrl-1 = <&i2c2_pins_sleep_a>;
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	status = "okay";
	/delete-property/dmas;
	/delete-property/dma-names;
};

&i2c5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c5_pins_a>;
	pinctrl-1 = <&i2c5_pins_sleep_a>;
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";
};

&ltdc {
	status = "okay";

	port {
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_ep0_out: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&dsi_in>;
		};
	};
};

&qspi {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&qspi_clk_pins_a &qspi_bk1_pins_a &qspi_bk2_pins_a>;
	pinctrl-1 = <&qspi_clk_sleep_pins_a &qspi_bk1_sleep_pins_a &qspi_bk2_sleep_pins_a>;
	reg = <0x58003000 0x1000>, <0x70000000 0x4000000>;
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";

	flash0: mx66l51235l@0 {
		compatible = "jedec,spi-nor";
		reg = <0>;
		spi-rx-bus-width = <4>;
		spi-max-frequency = <108000000>;
		#address-cells = <1>;
		#size-cells = <1>;
	};

	flash1: mx66l51235l@1 {
		compatible = "jedec,spi-nor";
		reg = <1>;
		spi-rx-bus-width = <4>;
		spi-max-frequency = <108000000>;
		#address-cells = <1>;
		#size-cells = <1>;
	};
};

&sdmmc3 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc3_b4_pins_a>;
	pinctrl-1 = <&sdmmc3_b4_od_pins_a>;
	pinctrl-2 = <&sdmmc3_b4_sleep_pins_a>;
	broken-cd;
	st,neg-edge;
	bus-width = <4>;
	status = "disabled";
};

&spi1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi1_pins_a>;
	pinctrl-1 = <&spi1_sleep_pins_a>;
	status = "disabled";
};

&timers2 {
	/* spare dmas for other usage (un-delete to enable pwm capture) */
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm2_pins_a>;
		pinctrl-1 = <&pwm2_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@1 {
		status = "okay";
	};
};

&timers8 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm8_pins_a>;
		pinctrl-1 = <&pwm8_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@7 {
		status = "okay";
	};
};

&timers12 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
	pwm {
		pinctrl-0 = <&pwm12_pins_a>;
		pinctrl-1 = <&pwm12_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@11 {
		status = "okay";
	};
};

&usart3 {
	pinctrl-names = "default", "sleep", "idle";
	pinctrl-0 = <&usart3_pins_a>;
	pinctrl-1 = <&usart3_sleep_pins_a>;
	pinctrl-2 = <&usart3_idle_pins_a>;
	uart-has-rtscts;
	status = "disabled";
};

&dsi {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";

	ports {
		#address-cells = <1>;
		#size-cells = <0>;

		port@0 {
			reg = <0>;
			dsi_in: endpoint {
				remote-endpoint = <&ltdc_ep0_out>;
			};
		};

		port@1 {
			reg = <1>;
			dsi_out: endpoint {
				remote-endpoint = <&dsi_panel_in>;
			};
		};
	};

	panel_dsi: panel-dsi@0 {
		compatible = "raydium,rm68200";
		reg = <0>;
		reset-gpios = <&gpiof 15 GPIO_ACTIVE_LOW>;
		backlight = <&panel_backlight>;
		status = "okay";

		port {
			dsi_panel_in: endpoint {
				remote-endpoint = <&dsi_out>;
			};
		};
	};
};

&m_can1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&m_can1_pins_a>;
	pinctrl-1 = <&m_can1_sleep_pins_a>;
	status = "okay";
};


&pinctrl {
	ethernet0_rgmii_pins_a: rgmii-0 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 5, AF11)>, /* ETH_RGMII_CLK125 */
			<STM32_PINMUX('G', 4, AF11)>, /* ETH_RGMII_GTX_CLK */
			<STM32_PINMUX('G', 8, AF2)>, /* ETH_CLK */
			<STM32_PINMUX('G', 13, AF11)>, /* ETH_RGMII_TXD0 */
			<STM32_PINMUX('G', 14, AF11)>, /* ETH_RGMII_TXD1 */
			<STM32_PINMUX('C', 2, AF11)>, /* ETH_RGMII_TXD2 */
			<STM32_PINMUX('E', 2, AF11)>, /* ETH_RGMII_TXD3 */
			<STM32_PINMUX('B', 11, AF11)>, /* ETH_RGMII_TX_CTL */
			<STM32_PINMUX('A', 2, AF11)>, /* ETH_MDIO */
			<STM32_PINMUX('C', 1, AF11)>; /* ETH_MDC */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 4, AF11)>, /* ETH_RGMII_RXD0 */
			<STM32_PINMUX('C', 5, AF11)>, /* ETH_RGMII_RXD1 */
			<STM32_PINMUX('B', 0, AF11)>, /* ETH_RGMII_RXD2 */
			<STM32_PINMUX('B', 1, AF11)>, /* ETH_RGMII_RXD3 */
			<STM32_PINMUX('A', 1, AF11)>, /* ETH_RGMII_RX_CLK */
			<STM32_PINMUX('A', 7, AF11)>; /* ETH_RGMII_RX_CTL */
			bias-disable;
		};
		pins3 {
			pinmux = <STM32_PINMUX('D', 11, GPIO)>; /* PHY reset */
			drive-push-pull;
			bias-pull-up;
			output-high;
			slew-rate = <0>;
		};
	};

	ethernet0_rgmii_pins_sleep_a: rgmii-sleep-0 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 5, ANALOG)>, /* ETH_RGMII_CLK125 */
			<STM32_PINMUX('G', 4, ANALOG)>, /* ETH_RGMII_GTX_CLK */
			<STM32_PINMUX('G', 8, ANALOG)>, /* ETH_CLK */
			<STM32_PINMUX('G', 13, ANALOG)>, /* ETH_RGMII_TXD0 */
			<STM32_PINMUX('G', 14, ANALOG)>, /* ETH_RGMII_TXD1 */
			<STM32_PINMUX('C', 2, ANALOG)>, /* ETH_RGMII_TXD2 */
			<STM32_PINMUX('E', 2, ANALOG)>, /* ETH_RGMII_TXD3 */
			<STM32_PINMUX('B', 11, ANALOG)>, /* ETH_RGMII_TX_CTL */
			<STM32_PINMUX('A', 2, ANALOG)>, /* ETH_MDIO */
			<STM32_PINMUX('C', 1, ANALOG)>, /* ETH_MDC */
			<STM32_PINMUX('C', 4, ANALOG)>, /* ETH_RGMII_RXD0 */
			<STM32_PINMUX('C', 5, ANALOG)>, /* ETH_RGMII_RXD1 */
			<STM32_PINMUX('B', 0, ANALOG)>, /* ETH_RGMII_RXD2 */
			<STM32_PINMUX('B', 1, ANALOG)>, /* ETH_RGMII_RXD3 */
			<STM32_PINMUX('A', 1, ANALOG)>, /* ETH_RGMII_RX_CLK */
			<STM32_PINMUX('A', 7, ANALOG)>, /* ETH_RGMII_RX_CTL */
			<STM32_PINMUX('D', 11, ANALOG)>; /* PHY reset */
		};
	};

	periph_on_pin: periph-on-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 3, GPIO)>, /* PERIPH_ON */
			<STM32_PINMUX('D', 14, GPIO)>, /* USB_HOST_PWR_ON */
			<STM32_PINMUX('A', 15, GPIO)>; /* USB_OTG1_PWR */
			drive-push-pull;
			bias-pull-up;
			output-high;
			slew-rate = <0>;
		};
	};
};
